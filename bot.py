# bot.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
import os
import sqlite3
import uuid
import logging
import asyncio
import json
from datetime import datetime
from decimal import Decimal
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import LabeledPrice, WebAppInfo, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import Command

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, "gorosso.db")
load_dotenv(os.path.join(BASE_DIR, 'tokens.env'))
BOT_TOKEN = os.getenv("BOT_TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")
CURRENCY = os.getenv("CURRENCY", "MDL")
ADMIN_IDS = [int(x) for x in (os.getenv("ADMIN_IDS", "") or "").split(",") if x.strip()]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# --- –†–∞–±–æ—Ç–∞ —Å –ë–î ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS categories
                   (
                       id
                       INTEGER
                       PRIMARY
                       KEY
                       AUTOINCREMENT,
                       name
                       TEXT
                       UNIQUE
                   )""")
    cur.execute("""CREATE TABLE IF NOT EXISTS products
                   (
                       id
                       INTEGER
                       PRIMARY
                       KEY
                       AUTOINCREMENT,
                       name
                       TEXT,
                       category_id
                       INTEGER,
                       price
                       INTEGER,
                       description
                       TEXT,
                       sizes
                       TEXT,
                       colors
                       TEXT,
                       photo
                       TEXT,
                       stock
                       INTEGER
                       DEFAULT
                       0,
                       created_at
                       TEXT
                   )""")
    cur.execute("""CREATE TABLE IF NOT EXISTS pending_orders
                   (
                       payload
                       TEXT
                       PRIMARY
                       KEY,
                       user_id
                       INTEGER,
                       amount
                       INTEGER,
                       created_at
                       TEXT
                   )""")
    cur.execute("""CREATE TABLE IF NOT EXISTS orders
                   (
                       id
                       INTEGER
                       PRIMARY
                       KEY
                       AUTOINCREMENT,
                       order_number
                       TEXT
                       UNIQUE,
                       user_id
                       INTEGER,
                       payload
                       TEXT,
                       total_amount
                       INTEGER,
                       status
                       TEXT,
                       payment_info
                       TEXT,
                       created_at
                       TEXT
                   )""")
    cur.execute("""CREATE TABLE IF NOT EXISTS order_items
                   (
                       id
                       INTEGER
                       PRIMARY
                       KEY
                       AUTOINCREMENT,
                       order_id
                       INTEGER,
                       product_id
                       INTEGER,
                       name
                       TEXT,
                       size
                       TEXT,
                       color
                       TEXT,
                       unit_price
                       INTEGER,
                       qty
                       INTEGER
                   )""")
    conn.commit()
    conn.close()


def db_exec(query, params=(), fetch=False):
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = lambda cursor, row: {col[0]: row[idx] for idx, col in enumerate(cursor.description)}
    cur = conn.cursor()
    cur.execute(query, params)
    if fetch:
        rows = cur.fetchall();
        conn.close();
        return rows
    conn.commit();
    conn.close()


init_db()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_admin(uid):
    return uid in ADMIN_IDS


# --- FSM –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ ---
class AddProductStates(
    StatesGroup): name = State(); category = State(); price = State(); description = State(); sizes = State(); colors = State(); stock = State(); photo = State()


class EditProductStates(StatesGroup): id_to_edit = State(); field = State(); new_value = State()


class DeleteProductStates(StatesGroup): id_to_delete = State()


# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_admin(user_id):
        user_commands = [
            BotCommand(command="/start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="/admin", description="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
        ]
        await bot.set_my_commands(user_commands, BotCommandScopeChat(chat_id=user_id))
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, –∏–ª–∏ —Ç–æ–ª—å–∫–æ /start
        await bot.delete_my_commands(BotCommandScopeChat(chat_id=user_id))

    kb = ReplyKeyboardBuilder()
    # !!! –ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –°–í–û–ô –†–ï–ê–õ–¨–ù–´–ô URL –æ—Ç GitHub Pages !!!
    web_app_url = 'https://igor-ch.github.io/tg-bot/'
    kb.row(types.KeyboardButton(text='üè™ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', web_app=WebAppInfo(url=web_app_url)))
    kb.row(types.KeyboardButton(text='–ú–æ–∏ –∑–∞–∫–∞–∑—ã'), types.KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã'))
    if is_admin(user_id):
        kb.row(types.KeyboardButton(text='–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'))  # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    await message.reply('–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gorosso.', reply_markup=kb.as_markup(resize_keyboard=True))


@dp.message(F.web_app_data)
async def web_app_data_handler(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        command = data.get('command')
        logger.info(f"Received from WebApp: {command}")

        if command == 'create_order':
            cart_data = data.get('cart', {})
            if not cart_data: return

            uid = message.from_user.id
            prices = []
            total_amount = 0
            for key, cart_item in cart_data.items():
                item = cart_item['item']
                qty = cart_item['qty']
                price_cents = int(item['price']) * qty
                total_amount += price_cents
                prices.append(LabeledPrice(label=f"{item['name']} x{qty}", amount=price_cents))

            payload = str(uuid.uuid4())
            db_exec('INSERT INTO pending_orders (payload, user_id, amount, created_at) VALUES (?, ?, ?, ?)',
                    (payload, uid, total_amount, datetime.utcnow().isoformat()))

            await bot.send_invoice(
                chat_id=uid, title='–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ Gorosso', description='–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
                provider_token=PROVIDER_TOKEN, currency=CURRENCY, prices=prices, payload=payload
            )
    except Exception as e:
        logger.error(f"Error in web_app_data_handler: {e}", exc_info=True)


@dp.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def contacts(message: types.Message):
    await message.reply('Gorosso ‚Äî streetwear brand\n–°–∞–π—Ç: gorosso.com\nInstagram: @gorosso')


@dp.message(F.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã')
async def my_orders(message: types.Message):
    # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è my_orders –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    pass


# --- –ü–õ–ê–¢–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
@dp.pre_checkout_query()
async def precheckout_handler(pre_q: types.PreCheckoutQuery):
    # –í–∞—à –∫–æ–¥ ...
    pass


@dp.message(F.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment_handler(message: types.Message):
    # –í–∞—à –∫–æ–¥ ...
    pass


# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ (–ü–û–õ–ù–û–°–¢–¨–Æ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê) ---
@dp.message(Command('admin'))
@dp.message(F.text == '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
async def admin_menu(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
        return
    kb = ReplyKeyboardBuilder()
    kb.row(types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'), types.KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'))
    kb.row(types.KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'), types.KeyboardButton(text='–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤'))
    kb.row(types.KeyboardButton(text='< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'))
    await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', reply_markup=kb.as_markup(resize_keyboard=True))


@dp.message(F.text == '< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
async def back_to_main_menu(message: types.Message):
    await cmd_start(message)  # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é


# –î–∞–ª–µ–µ –∏–¥—É—Ç –≤—Å–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
# –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–∞–π–ª–µ, —è –∏—Ö –∑–¥–µ—Å—å —Å–æ–∫—Ä–∞—Ç–∏–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å!
# –ù–∞–ø—Ä–∏–º–µ—Ä:
@dp.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def addproduct_start(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id): return
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddProductStates.name)


# ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM...
# ... –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω-—Ö–µ–Ω–¥–ª–µ—Ä—ã ...

# --- –ó–ê–ü–£–°–ö ---
async def main():
    logger.info('Starting Gorosso bot...')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –û–ë–©–ò–ï –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö (–±–µ–∑ –∞–¥–º–∏–Ω–∫–∏)
    await bot.set_my_commands([
        types.BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    ], BotCommandScopeDefault())
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.warning('Bot stopped.')