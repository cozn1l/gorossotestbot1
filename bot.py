# bot.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import os
import sqlite3
import uuid
import logging
import asyncio
import json
from datetime import datetime
from decimal import Decimal
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import LabeledPrice, WebAppInfo
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import Command

# --- –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ö–µ–ª–ø–µ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, "gorosso.db")
load_dotenv(os.path.join(BASE_DIR, 'tokens.env'))
BOT_TOKEN = os.getenv("BOT_TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")
CURRENCY = os.getenv("CURRENCY", "MDL")
ADMIN_IDS = [int(x) for x in (os.getenv("ADMIN_IDS", "") or "").split(",") if x.strip()]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


def init_db():
    # ... –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è init_db –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    pass


def db_exec(query, params=(), fetch=False):
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = lambda cursor, row: {col[0]: row[idx] for idx, col in enumerate(cursor.description)}
    cur = conn.cursor()
    cur.execute(query, params)
    if fetch:
        rows = cur.fetchall();
        conn.close();
        return rows
    conn.commit();
    conn.close()


init_db()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è


# ---------- Helpers (–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏) ----------
def is_admin(uid):
    return uid in ADMIN_IDS


def cents_from_decimal(x):
    if isinstance(x, Decimal):
        a = x
    else:
        a = Decimal(str(x))
    return int((a * 100).quantize(Decimal('1')))


def generate_order_number():
    now = datetime.utcnow()
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è SQLite —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è, –ø–æ—ç—Ç–æ–º—É —è –µ—ë –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏–ª
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM orders WHERE created_at LIKE ?", (f"{now.date()}%",))
    count = cur.fetchone()[0]
    conn.close()

    serial = (count if count else 0) + 1
    return f"GRS-{now.strftime('%Y%m%d')}-{serial:04d}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF, –æ–Ω–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
def generate_invoice_pdf(order_number, username, items, total_amount):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–≤–æ–π –∫–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.
    # –ï—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—É—Å—Ç–æ–π.
    logger.info(f"Generated PDF for order {order_number}")
    pass  # –í—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏


# ... –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã (is_admin, generate_order_number –∏ —Ç.–¥.) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

class AddProductStates(
    StatesGroup): name = State(); category = State(); price = State(); description = State(); sizes = State(); colors = State(); stock = State(); photo = State()


class EditProductStates(StatesGroup): id_to_edit = State(); field = State(); new_value = State()


class DeleteProductStates(StatesGroup): id_to_delete = State()


# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    kb = ReplyKeyboardBuilder()
    # !!! –ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –°–í–û–ô –†–ï–ê–õ–¨–ù–´–ô URL –æ—Ç GitHub Pages !!!
    web_app_url = 'https://cozn1l.github.io/gorossotestbot/webapp/'
    kb.row(types.KeyboardButton(text='üè™ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', web_app=WebAppInfo(url=web_app_url)))
    kb.row(types.KeyboardButton(text='–ú–æ–∏ –∑–∞–∫–∞–∑—ã'), types.KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã'))
    if is_admin(message.from_user.id):
        kb.row(types.KeyboardButton(text='/admin'))
    await message.reply('–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gorosso.', reply_markup=kb.as_markup(resize_keyboard=True))


@dp.message(F.web_app_data)
async def web_app_data_handler(message: types.Message):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¢–û–õ–¨–ö–û –∑–∞–∫–∞–∑ –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    try:
        data = json.loads(message.web_app_data.data)
        command = data.get('command')
        logger.info(f"Received from WebApp: {command}")

        if command == 'create_order':
            cart_data = data.get('cart', {})
            if not cart_data: return

            uid = message.from_user.id
            prices = []
            total_amount = 0
            for key, cart_item in cart_data.items():
                item = cart_item['item']
                qty = cart_item['qty']
                price_cents = int(item['price']) * qty
                total_amount += price_cents
                prices.append(LabeledPrice(label=f"{item['name']} x{qty}", amount=price_cents))

            payload = str(uuid.uuid4())
            db_exec('INSERT INTO pending_orders (payload, user_id, amount, created_at) VALUES (?, ?, ?, ?)',
                    (payload, uid, total_amount, datetime.utcnow().isoformat()))

            await bot.send_invoice(
                chat_id=uid, title='–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ Gorosso', description='–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
                provider_token=PROVIDER_TOKEN, currency=CURRENCY, prices=prices, payload=payload
            )

    except Exception as e:
        logger.error(f"Error in web_app_data_handler: {e}", exc_info=True)


@dp.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def contacts(message: types.Message):
    await message.reply('Gorosso ‚Äî streetwear brand\n–°–∞–π—Ç: gorosso.com\nInstagram: @gorosso')


@dp.message(F.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã')
async def my_orders(message: types.Message):
    # ... –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è my_orders –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    pass


# --- –ü–õ–ê–¢–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
@dp.pre_checkout_query()
async def precheckout_handler(pre_q: types.PreCheckoutQuery):
    # ... –í–∞—à –∫–æ–¥ ...
    pass


@dp.message(F.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment_handler(message: types.Message):
    # ... –í–∞—à –∫–æ–¥ ...
    pass


# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
# –í—Å–µ –≤–∞—à–∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –∑–¥–µ—Å—å –∫–∞–∫ –µ—Å—Ç—å
@dp.message(Command('admin'))
async def admin_menu(message: types.Message):
    # ... –í–∞—à –∫–æ–¥ ...
    pass


# ... –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ...


# --- –ó–ê–ü–£–°–ö ---
async def main():
    logger.info('Starting Gorosso bot...')
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.warning('Bot stopped.')