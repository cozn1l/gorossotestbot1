// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç Telegram Web App
const tg = window.Telegram.WebApp;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const API_URL = 'https://cozn1l.github.io/gorossotestbot/webapp/'; // –ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –°–í–û–ô URL –ü–û–°–õ–ï –ó–ê–ì–†–£–ó–ö–ò
const API_BASE_URL = 'https://gorossotestbot.onrender.com/'
const CURRENCY = 'MDL';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let shopData = { categories: [], products: [] };
let currentScreen = 'loader';
let navigationHistory = []; // –î–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
let cart = {}; // { 'product_id_size_color': { item, qty } }

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API ---
async function fetchShopData() {
    try {
        const response = await fetch(`${API_BASE_URL}/api/all_data`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        shopData = data;
        renderCategories(shopData.categories);
        showScreen('categories-screen');
    } catch (error) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞:", error);
        document.getElementById('loader').innerHTML = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞.<br>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
    document.getElementById(screenId).classList.add('active');
    currentScreen = screenId;

    if (navigationHistory.length > 0) {
        tg.BackButton.show();
    } else {
        tg.BackButton.hide();
    }
}

function navigateTo(screenId, context) {
    navigationHistory.push({ screen: currentScreen, context: context });
    showScreen(screenId);
}

function goBack() {
    if (navigationHistory.length === 0) return;
    const previous = navigationHistory.pop();
    // –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
    if (previous.screen === 'categories-screen') {
        renderCategories(shopData.categories);
    } else if (previous.screen === 'products-screen') {
        const cat = shopData.categories.find(c => c.id === previous.context.categoryId);
        renderProducts(previous.context.categoryId, cat ? cat.name : '');
    }
    showScreen(previous.screen);
}

function renderCategories(categories) {
    const list = document.getElementById('categories-list');
    list.innerHTML = '';
    categories.forEach(cat => {
        const item = document.createElement('div');
        item.className = 'item';
        item.innerText = cat.name;
        item.onclick = () => {
            navigationHistory.push({ screen: 'categories-screen' });
            renderProducts(cat.id, cat.name);
        };
        list.appendChild(item);
    });
}

function renderProducts(categoryId, categoryName) {
    document.getElementById('category-title').innerText = categoryName;
    const grid = document.getElementById('products-list');
    grid.innerHTML = '';
    const products = shopData.products.filter(p => p.category_id === categoryId);

    if (products.length === 0) {
        grid.innerHTML = '<p>–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.</p>';
    } else {
        products.forEach(p => {
            const card = document.createElement('div');
            card.className = 'product-card';
            card.innerHTML = `
                <img src="${p.photo}" alt="${p.name}">
                <div class="product-card-info">
                    <h3>${p.name}</h3>
                    <p>${(p.price / 100).toFixed(2)} ${CURRENCY}</p>
                </div>
            `;
            card.onclick = () => {
                navigationHistory.push({ screen: 'products-screen', context: { categoryId: categoryId, categoryName: categoryName } });
                renderProductDetails(p.id);
            };
            grid.appendChild(card);
        });
    }
    showScreen('products-screen');
}

function renderProductDetails(productId) {
    const product = shopData.products.find(p => p.id === productId);
    const content = document.getElementById('product-details-content');

    const sizesHtml = product.sizes.length > 0
        ? `<div class="options-group"><h4>–†–∞–∑–º–µ—Ä:</h4>${product.sizes.map(s => `<span class="option-button" data-type="size" data-value="${s}">${s}</span>`).join('')}</div>`
        : '';
    const colorsHtml = product.colors.length > 0
        ? `<div class="options-group"><h4>–¶–≤–µ—Ç:</h4>${product.colors.map(c => `<span class="option-button" data-type="color" data-value="${c}">${c}</span>`).join('')}</div>`
        : '';

    content.innerHTML = `
        <img src="${product.photo}" alt="${product.name}">
        <h2>${product.name}</h2>
        <p><strong>${(product.price / 100).toFixed(2)} ${CURRENCY}</strong></p>
        <p>${product.description}</p>
        ${sizesHtml}
        ${colorsHtml}
        <button id="add-to-cart-btn" class="action-button" onclick='addToCart(${product.id})'>–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
    `;

    document.querySelectorAll('.option-button').forEach(btn => {
        btn.onclick = (e) => {
            const type = e.target.dataset.type;
            document.querySelectorAll(`.option-button[data-type=${type}]`).forEach(b => b.classList.remove('selected'));
            e.target.classList.add('selected');
        };
    });
    showScreen('product-details-screen');
}


// --- –õ–æ–≥–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
function addToCart(productId) {
    const product = shopData.products.find(p => p.id === productId);
    const selectedSizeEl = document.querySelector('.option-button[data-type="size"].selected');
    const selectedColorEl = document.querySelector('.option-button[data-type="color"].selected');

    if (product.sizes.length > 0 && !selectedSizeEl) {
        tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä');
        return;
    }
    if (product.colors.length > 0 && !selectedColorEl) {
        tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç');
        return;
    }

    const size = selectedSizeEl ? selectedSizeEl.dataset.value : '--';
    const color = selectedColorEl ? selectedColorEl.dataset.value : '--';
    const cartKey = `${productId}_${size}_${color}`;

    if (cart[cartKey]) {
        cart[cartKey].qty += 1;
    } else {
        cart[cartKey] = {
            item: { id: product.id, name: product.name, price: product.price, size: size, color: color },
            qty: 1
        };
    }

    tg.HapticFeedback.notificationOccurred('success');
    updateCartCounter();
    tg.showAlert(`${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
}

function updateCartCounter() {
    const counter = document.getElementById('cart-counter');
    const totalItems = Object.values(cart).reduce((sum, entry) => sum + entry.qty, 0);
    if (totalItems > 0) {
        counter.innerText = totalItems;
        counter.style.display = 'inline-block';
    } else {
        counter.style.display = 'none';
    }
}

function showCart() {
    navigationHistory.push({ screen: currentScreen }); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
    const itemsContainer = document.getElementById('cart-items');
    const totalContainer = document.getElementById('cart-total');
    itemsContainer.innerHTML = '';

    let totalAmount = 0;
    const cartItems = Object.values(cart);

    if (cartItems.length === 0) {
        itemsContainer.innerHTML = '<p>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>';
        totalContainer.innerText = '';
        tg.MainButton.hide();
    } else {
        cartItems.forEach(entry => {
            const cartKey = `${entry.item.id}_${entry.item.size}_${entry.item.color}`;
            itemsContainer.innerHTML += `
                <div class="cart-item">
                    <div class="cart-item-info">
                        <strong>${entry.item.name}</strong><br>
                        <small>${entry.item.size}, ${entry.item.color}</small>
                    </div>
                    <div>${entry.qty} x ${(entry.item.price / 100).toFixed(2)}</div>
                    <div class="cart-item-remove" onclick="removeFromCart('${cartKey}')"> üóëÔ∏è </div>
                </div>`;
            totalAmount += entry.item.price * entry.qty;
        });
        totalContainer.innerText = `–ò—Ç–æ–≥–æ: ${(totalAmount / 100).toFixed(2)} ${CURRENCY}`;
        tg.MainButton.setText(`–û–ø–ª–∞—Ç–∏—Ç—å ${(totalAmount / 100).toFixed(2)} ${CURRENCY}`);
        tg.MainButton.show();
    }
    showScreen('cart-screen');
}

function removeFromCart(cartKey) {
    delete cart[cartKey];
    showCart();
    updateCartCounter();
}

function showCatalog() {
    navigationHistory = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∫–∞—Ç–∞–ª–æ–≥
    renderCategories(shopData.categories);
    showScreen('categories-screen');
}


// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
window.addEventListener('load', () => {
    tg.ready();
    tg.expand();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞—à–µ–≥–æ API
    fetchShopData();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å"
    tg.on('mainButtonClicked', () => {
        if (Object.keys(cart).length > 0) {
            tg.sendData(JSON.stringify({ command: 'create_order', cart: cart }));
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    tg.on('backButtonClicked', () => {
        goBack();
    });

    // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º onclick –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelector('.bottom-nav button:first-child').onclick = showCatalog;
    document.querySelector('.bottom-nav button:nth-child(2)').onclick = showCart;
    document.querySelectorAll('.back-button').forEach(btn => {
        btn.onclick = goBack;
    });
});